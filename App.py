{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0c124dd1-d436-4bd6-9817-049c4ad1e414",
   "metadata": {},
   "outputs": [],
   "source": [
    "# app.py\n",
    "\n",
    "import os\n",
    "import csv\n",
    "from flask import Flask, request, render_template, redirect, url_for, session\n",
    "import datetime\n",
    "from datetime import date, timedelta\n",
    "import threading\n",
    "import uuid\n",
    "import time\n",
    "\n",
    "# Configurações de arquivos e pastas\n",
    "DATA_FOLDER = \"dados_app\"\n",
    "os.makedirs(DATA_FOLDER, exist_ok=True)\n",
    "\n",
    "USERS_CSV_FILE = os.path.join(DATA_FOLDER, 'usuarios.csv')\n",
    "BOOKINGS_CSV_FILE = os.path.join(DATA_FOLDER, 'reservas.csv')\n",
    "REG_LOG_CSV_FILE = os.path.join(DATA_FOLDER, 'logs_de_registro.csv')\n",
    "BOOKING_LOG_CSV_FILE = os.path.join(DATA_FOLDER, 'logs_de_reserva.csv')\n",
    "ROOM_QUERY_LOG_CSV_FILE = os.path.join(DATA_FOLDER, 'logs_de_consultas_de_sala.csv')\n",
    "\n",
    "app = Flask(__name__)\n",
    "app.secret_key = 'uma-chave-secreta-fixa-e-segura-para-sua-app'\n",
    "MANAGER_SECRET_CODE = 'GESTORTJRS0830'\n",
    "\n",
    "users = {}\n",
    "bookings = []\n",
    "rooms = {\n",
    "    '1703': {'desks': 20},\n",
    "    '2107': {'desks': 20},\n",
    "    '2203': {'desks': 20},\n",
    "    '2207': {'desks': 20}\n",
    "}\n",
    "\n",
    "def save_data():\n",
    "    try:\n",
    "        user_fieldnames = ['user_id', 'password', 'name', 'team', 'role']\n",
    "        users_list = [dict(data, user_id=user_id) for user_id, data in users.items()]\n",
    "        with open(USERS_CSV_FILE, 'w', newline='', encoding='utf-8') as f:\n",
    "            writer = csv.DictWriter(f, fieldnames=user_fieldnames)\n",
    "            writer.writeheader()\n",
    "            writer.writerows(users_list)\n",
    "\n",
    "        booking_fieldnames = ['id', 'user_id', 'date', 'room', 'desk']\n",
    "        with open(BOOKINGS_CSV_FILE, 'w', newline='', encoding='utf-8') as f:\n",
    "            writer = csv.DictWriter(f, fieldnames=booking_fieldnames)\n",
    "            writer.writeheader()\n",
    "            writer.writerows(bookings)\n",
    "    except Exception as e:\n",
    "        print(f\"Erro ao salvar dados: {e}\")\n",
    "\n",
    "def load_data():\n",
    "    global users, bookings\n",
    "    try:\n",
    "        if os.path.exists(USERS_CSV_FILE):\n",
    "            with open(USERS_CSV_FILE, 'r', newline='', encoding='utf-8') as f:\n",
    "                reader = csv.DictReader(f)\n",
    "                users = {row.pop('user_id'): row for row in reader}\n",
    "        if os.path.exists(BOOKINGS_CSV_FILE):\n",
    "            with open(BOOKINGS_CSV_FILE, 'r', newline='', encoding='utf-8') as f:\n",
    "                reader = csv.DictReader(f)\n",
    "                bookings = [{**row, 'desk': int(row['desk'])} for row in reader]\n",
    "        if not users:\n",
    "            initialize_default_data()\n",
    "    except Exception as e:\n",
    "        print(f\"Erro ao carregar dados: {e}\")\n",
    "\n",
    "def initialize_default_data():\n",
    "    # Criar um usuário admin default, só para exemplo\n",
    "    users['admin'] = {\n",
    "        'password': 'admin',\n",
    "        'name': 'Administrador',\n",
    "        'team': 'Gestão',\n",
    "        'role': 'manager'\n",
    "    }\n",
    "    save_data()\n",
    "\n",
    "# Ao iniciar, carregue os dados\n",
    "load_data()\n",
    "\n",
    "# Aqui começa a próxima parte: rotas, etc.\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
